async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip().lower()

    # Ø±Ø¯ Ø°ÙƒÙŠ Ø¹Ù„Ù‰ Ø·Ù„Ø¨ Ù…Ø³Ø§Ø¦Ù„ Ù†Ù‡Ø§ÙŠØ§Øª
    if "Ù…Ø³Ø§Ù„Ø©" in user_message or "Ù…Ø³Ø£Ù„Ø©" in user_message or "Ù†Ù‡Ø§ÙŠØ©" in user_message or "limit" in user_message:
        await update.message.reply_text(
            "ØªÙ…Ø§Ù… ÙŠØ§ Ù†Ø¬Ù…ØŒ ØªØ¹Ø§Ù„Ù‰ Ù†Ø±ÙƒØ² ÙƒØ¯Ù‡ Ø³ÙˆØ§ ðŸ’ª\n\nØ§Ù„Ø³Ø¤Ø§Ù„:\nØ§Ø­Ø³Ø¨ Ù†Ù‡Ø§ÙŠØ© Ø§Ù„Ø¯Ø§Ù„Ø© Ø§Ù„ØªØ§Ù„ÙŠØ© Ù„Ù…Ø§ x ØªØ±ÙˆØ­ Ù„Ù€ 2:\n\n$$\n\\lim_{x \\to 2} \\frac{x^2 - 4}{x - 2}\n$$",
            parse_mode=telegram.constants.ParseMode.MARKDOWN
        )
        return

    # Ù„Ùˆ Ù…Ø´ Ù…Ø³Ø£Ù„Ø©ØŒ Ø§Ø¨Ø¹Øª Ù„ÙˆØ§Ø¬Ù‡Ø© OpenAI
    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": pre_prompt},
            {"role": "user", "content": user_message}
        ]
    )

    reply = completion.choices[0].message["content"]
    await update.message.reply_text(reply, parse_mode=telegram.constants.ParseMode.MARKDOWN)
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import openai
import os
